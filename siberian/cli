#!/usr/bin/env php
<?php

/**
 * Siberian
 *
 * @version 4.12.18
 * @author Xtraball SAS <dev@xtraball.com>
 */

global $_config;

date_default_timezone_set('Europe/London');

if (!file_exists('./config.php')) {
    copy('./config.sample.php', './config.php');
}

require_once './config.php';
require_once './Colors.php';

set_time_limit(300);
ini_set('max_execution_time', 300);
umask(0);

setlocale(LC_MONETARY, 'en_US');

defined('DS')
    || define('DS', DIRECTORY_SEPARATOR);

defined('APPLICATION_PATH')
    || define('APPLICATION_PATH', realpath(dirname(__FILE__) . '/app'));

// Defining ENV globally!
defined('APPLICATION_ENV')
    || define('APPLICATION_ENV', $_config['environment']);

// Sourcing default libs!
set_include_path(implode(PATH_SEPARATOR, array(
    realpath(APPLICATION_PATH . '/../lib'),
)));

require_once 'Zend/Application.php';

// Initializing the application!
$ini = is_readable(APPLICATION_PATH . '/configs/app.ini') ?
    APPLICATION_PATH . '/configs/app.ini' : APPLICATION_PATH . '/configs/app.sample.ini';

$application = new Zend_Application(
    $_config['environment'],
    [
        'config' => [
            $ini,
            APPLICATION_PATH . '/configs/resources.cachemanager.ini',
        ],
    ]
);

$config = new Zend_Config($application->getOptions(), true);
Zend_Registry::set('config', $config);
Zend_Registry::set('_config', $_config);

session_cache_limiter(false);

$application->bootstrap();

try {
    $action = isset($argv[1]) ? $argv[1] : '';
    switch ($action) {
        case 'export-schemas':
            (new Siberian_Migration_Db())
                ->exportAll();
            break;
        case 'export-database':
            $dbParams = $config->resources->db->params;
            $filename = readline('Filename for the export: ');
            if (is_file($filename)) {
                $erase = readline('The given file already exists, would you like to replace it? (Y/n): ');
                if ($erase !== 'Y') {
                    echo 'Aborting.' . PHP_EOL;
                    die();
                }
            }
            $command = sprintf("mysqldump -h %s -u %s --password='%s' %s -r '%s'",
                $dbParams->host,
                $dbParams->username,
                $dbParams->password,
                $dbParams->dbname,
                $filename);
            exec($command);
            echo 'Export done.' . PHP_EOL;
            break;
        case 'version':
            $versionContent = file_get_contents('./lib/Siberian/Version.php');
            $versionContent = preg_replace("#const VERSION = '([0-9a-z\.\-]+)';#im",
                'const VERSION = \'' . $argv[2] . '\';', $versionContent);
            file_put_contents('./lib/Siberian/Version.php', $versionContent);
            break;
        case 'user:update-password':
            $userEmail = readline('Input backoffice user e-mail to change: ');
            $backofficeUser = (new Backoffice_Model_User())
                ->find($userEmail, 'email');
            if (!$backofficeUser->getId()) {
                echo 'Sorry this e-mail doesn\'t exists.' . PHP_EOL;
            } else {
                $newPassword = null;
                $testPassword = function () {
                    $newPassword = readline('Your new password (min 8 characters): ');
                    if (strlen($newPassword) < 6) {
                        echo 'Password too short.' . PHP_EOL;
                        return false;
                    }
                    return $newPassword;
                };

                do {
                    $newPassword = $testPassword();
                } while (!$newPassword);

                // Then update!
                $backofficeUser
                    ->setPassword($newPassword)
                    ->save();

                echo 'Password successfully changed.' . PHP_EOL;
            }
            break;
        case 'user:create':
            $userEmail = readline('Input new backoffice user e-mail: ');
            $backofficeUser = (new Backoffice_Model_User())
                ->find($userEmail, 'email');

            if ($backofficeUser->getId()) {
                echo 'Sorry this e-mail is used.' . PHP_EOL;
                die();
            }

            $newPassword = null;
            $testPassword = function () {
                $newPassword = readline('Input new backoffice user password: ');
                if (strlen($newPassword) < 6) {
                    echo 'Password too short.' . PHP_EOL;
                    return false;
                }
                return $newPassword;
            };

            do {
                $newPassword = $testPassword();
            } while (!$newPassword);

            $backofficeUser
                ->setEmail($userEmail)
                ->setPassword($newPassword)
                ->save();

            echo 'Your new user is now created.' . PHP_EOL;

            break;
        case 'dev':
        case 'development':
            $configContent = file_get_contents('./config.php');
            $configContent = preg_replace('#\$_config\[("|\')environment("|\')\] = ("|\')(development|production)("|\');#im',
                '$_config[\'environment\'] = \'development\';', $configContent);
            file_put_contents('./config.php', $configContent);
            System_Model_Config::setValueFor('environment', 'development');
            break;
        case 'prod':
        case 'production':
            $configContent = file_get_contents('./config.php');
            $configContent = preg_replace('#\$_config\[("|\')environment("|\')\] = ("|\')(development|production)("|\');#im',
                '$_config[\'environment\'] = \'production\';', $configContent);
            file_put_contents('./config.php', $configContent);
            System_Model_Config::setValueFor('environment', 'production');
            break;
        case 'firebase':

            $cyphered = 'TGcBA/YycwzVkGh1WYB95dEbrFGDgThkagwWvGY4CxTsFo2cd86bymjPCfgpP1fEqemhMxJzKVaE9jRHeXH3A6ztzaKEd9IemuJ5pLIyU/jirxjYBaU5uB6DVsFnJxL8OUVoxXwy1ODrShygSr/VYUbFLrMo5Ktk6ZbxSPML0ovvghBVVcrcV6f6r9EkevC8LJ4jJNv272oeg7+0mHPHuGjpM16szbatk2J6LWrIZbojGz/FIfodocqa+PO8xKDrH9+bM0tUkv4aa0+rAbSbedO/q5rHQtxR0ikrzKlvWio0Ux3fFtznDHNzICiV4AQiLhAFUdHovIv2wf9+L47gsEhiyDIiVTQGL9tMWQMwv20Y6qvY8pcei2/eWwnIiyDbTx8yPYCTZaSJY8G0roHEJj5Wbk+nb7Q2g2I5y/6I9OEENhT9vJdxYbhB6sbPJP3864YoLNkRsc4YMLm4jtGXk/I6IrAdMnouigc4t9d4PZ6bmX0FOAUNRkgZk4i/0eBTOOOn+nR5m/MXjKsUmGKLn4JHfgln5tYBd49t+Ov2FqlPxO7KdzqY9BW0N0/vRPd1GAYP12k0vU2ZMhldcLkDvSH6Yz057lOcMRqNdyQU8hGOYbr9nDAOxSVuQzZ2IwtfteNYZ6ed/MM80isY3ImVirnj273VidOgUlVI5pE/VZ4=';
            $privateKeyPath = Core_Model_Directory::getBasePathTo('/var/apps/certificates/keys/google-credentials');
            $clear = \Siberian\Cypher::decypher($privateKeyPath, $cyphered, 'f1r3B45315my541t');
            $parts = explode(':', $clear);
            $creds = [
                'email' => $parts[0],
                'password' => $parts[1],
            ];

            $projectNumber = '825760444411';
            $packageName = 'dev.siberiancms.www.android584bee1f1ae91';

            $firebase = new \Siberian\Firebase\Api();
            $firebase->login($creds['email'], $creds['password']);

            // Download the configuration
            $result = $firebase->packageNameExists($packageName);
            print_r($result);

            $configuration = [];

            if ($result !== false) {
                $googleServiceConfig = $firebase->downloadConfig(
                    $result['projectNumber'],
                    $result['clientId']);
                $googleServiceShort = \Siberian\Firebase\Utils::extractSingleConfig($googleServiceConfig, $packageName);

                $configuration['projectNumber'] = $result['projectNumber'];
                $configuration['clientId'] = $result['clientId'];
                $configuration['googleService'] = $googleServiceShort;
            } else {
                // Create the application!
                $addClientResponse = $firebase->addClient($projectNumber, $appName, $packageName);
                $clientResponse = \Siberian_Json::decode($addClientResponse);

                $googleServiceConfig = $firebase->downloadConfig(
                    $clientResponse['client']['projectNumber'],
                    $clientResponse['client']['clientId']);
                $googleServiceShort = \Siberian\Firebase\Utils::extractSingleConfig($googleServiceConfig, $packageName);

                $configuration['projectNumber'] = $clientResponse['client']['projectNumber'];
                $configuration['clientId'] = $clientResponse['client']['clientId'];
                $configuration['googleService'] = $googleServiceShort;
            }

            print_r($configuration);
        case 'help':
        default:
            echo color('== Siberian CLI Help ==', 'blue') . "
            
" . color('export-schemas', 'brown') . "
    Export current tables schema to /var/schema/%VERSION%/ to php files.
    
" . color('export-database', 'brown') . "
    Export complete database.
    
" . color('version <version>', 'brown') . "
    Changes the current version to <version>.

" . color('user:update-password', 'brown') . "
    Change / Reset a backoffice user password.

" . color('user:create', 'brown') . "
    Create a new backoffice user.

" . color('development|dev', 'brown') . "
    Set environment to 'development'.

" . color('production|prod', 'brown') . "
    Set environment to 'production'.

" . color('help', 'brown') . "
    Prints the current help message.    

";
    }
} catch (Exception $e) {
    echo $e->getMessage() . PHP_EOL;
}